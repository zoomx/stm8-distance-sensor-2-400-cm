/**
  ******************************************************************************
  * @file main.c
  * @brief Adjustable LED blinking speed using STM8S-DISCOVERY touch sensing key
  * Application example.
  * @author STMicroelectronics - MCD Application Team
  * @version V1.0.0
  * @date 25-NOV-2011
  ******************************************************************************
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
	* FOR MORE INFORMATION PLEASE READ CAREFULLY THE LICENSE AGREEMENT FILE LOCATED 
  * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
  *
  * <h2><center>&copy; COPYRIGHT 2008 STMicroelectronics</center></h2>
  * @image html logo.bmp
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "stm8s.h"
#include "delay.h"
#include "rfm70.h"
#include "rfm70-config.h"
#include "ds18b20.h"

/* Private functions ---------------------------------------------------------*/
/* Global variables ----------------------------------------------------------*/
/* Public functions ----------------------------------------------------------*/
void tempo (long t);
/**
  ******************************************************************************
  * @brief Main function.
  * @par Parameters:
  * None
  * @retval void None
  * @par Required preconditions:
  * None
  ******************************************************************************
  */
void main(void)
{
  uint8_t len, i, chksum, pipe;
  uint8_t rx_buf[ RFM70_MAX_PACKET_LEN ];
  _CONST uint8_t tx_buf[17]={
       0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,
       0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x78};

  /* Fmaster = 16MHz */
  CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);
  //CLK->CKDIVR = 0x00;
  CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI, ENABLE);
  CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER4, ENABLE);   /* 8bit: for implementing delays */
  CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2, ENABLE);   /* 16bit: for capture of ultrasonic distance pulse width */

  /* PD0 in open drain low */
  GPIO_Init(GPIOD, GPIO_PIN_0, GPIO_MODE_OUT_OD_LOW_SLOW);
  
  DS18B20_init();
  rfm70_init();
  
  /* TIMER4 configuration */
  TIM4_DeInit();
  TIM4_TimeBaseInit(TIM4_PRESCALER_128, 250);                 /* 2MS overflow interval - 500Hz*/
  TIM4_ITConfig(TIM4_IT_UPDATE, ENABLE);
  //TIM4_ClearITPendingBit(TIM4_IT_UPDATE);
  TIM4_Cmd(ENABLE);

  enableInterrupts();	

  while (1)
  {
   if(DELAY_100MS_FLAG == TRUE)
   {
     GPIO_ToggleBits(GPIOD, GPIO_PIN_0);
     DELAY_100MS_FLAG = FALSE;
     
     rfm70_mode_transmit();
	 rfm70_transmit_message_once( tx_buf, 17 ); 
     //WAIT_US( 100 );
     delay_10us(100); 	 	
     rfm70_mode_receive(); 
   }
   if( rfm70_receive( &pipe, &rx_buf, &len ))
   {
     chksum = 0;
     for(i=0;i<16;i++)
     {
	   chksum +=rx_buf[i]; 
	 }
	 /*if(chksum==rx_buf[16]&&rx_buf[0]==0x30)
	 {
	   receive_led = 20;
	 }*/	
	 rfm70_register_write( RFM70_CMD_FLUSH_RX,0 );
   }
   /*delay 50MS*/
   while(DELAY_50MS_FLAG == FALSE);
   DELAY_50MS_FLAG = FALSE; 
  }
}


/**
  ******************************************************************************
  * @brief Loop for temporisation
  * @par Parameters:
  * None
  * @retval void None
  * @par Required preconditions:
  * None
  ******************************************************************************
  */
void tempo(long t)
{
  long i;
  for (i = 0;i < t;i++);
}

/****************** (c) 2008  STMicroelectronics ******************************/

#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval
  * None
  */
void assert_failed(u8* file, u32 line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {}
}
#endif

/**
  * @}
  */
